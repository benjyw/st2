name: Mongodb Service Example

on:
  push:
    branches:
    - gha-service

jobs:
# Runs all steps on the VM
# The service containers will use host port binding instead of container networking so you access them via localhost rather than the service name
  vm-job:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: bitnami/mongodb
        # 'mongo' image does not provide a way to specify command line options
        # 'bitnami/mongodb' provides MONGODB_EXTRA_FLAGS.
        # env:
        #   MONGODB_EXTRA_FLAGS: --config /etc/mongo/mongod.conf
        # the config file defaults to (not overridable):
        #   MONGODB_CONF_FILE: 

        ports:
        # will assign a random free host port
        - 27017/tcp

        # in order to allow editing the mongo config, mount the config file in a volume.
        # Use 'options' instead of 'volumes' to mount it read-write
        #volumes:
        #- /root/mongoconf:/opt/bitnami/mongodb/conf

        # These are strictly docker options.
        # We cannot pass args to the entrypoint from here (due to how docker create command is constructed)
        options: >-
          --name mongodb
#          -v /root/mongoconf:/opt/bitnami/mongodb/conf

    steps:
    - run: docker exec mongodb cat /opt/bitnami/scripts/mongodb/entrypoint.sh
    - run: docker exec mongodb cat /opt/bitnami/scripts/mongodb-env.sh
    - run: docker exec mongodb cat /opt/bitnami/scripts/mongodb/run.sh
    - run: docker exec mongodb cat /opt/bitnami/scripts/mongodb/setup.sh
    - run: docker exec mongodb cat /opt/bitnami/scripts/libmongodb.sh
    - run: docker exec mongodb ls -l /opt/bitnami/mongodb/conf
    - run: docker ps
      env:
        # use localhost for the host here because we are running the job on the VM.
        # If we were running the job on in a container this would be mongodb
        MONGODB_HOST: localhost
        MONGODB_PORT: ${{ job.services.mongodb.ports[27017] }} # get randomly assigned published port
        MONGODB_ID: ${{ job.services.mongodb.id }}
        MONGODB_NETWORK: ${{ job.services.mongodb.network }}
    - run: docker exec mongodb ps -ef

    - name: restart mongodb service container (eg after changing config)
      run: docker restart mongodb

    - name: wait for mongodb
      timeout-minutes: 2
      # for a container without a HEALTHCHECK
      run: until [ "$(docker inspect -f {{.State.Running}} mongodb)" == "true" ]; do sleep 0.1; done
      # for a container with a HEALTHCHECK
      # run: until [ "$(docker inspect -f {{.State.Health.Status}} mongodb)" == "healthy" ]; do sleep 0.1; done

    - run: docker exec mongodb ps -ef
